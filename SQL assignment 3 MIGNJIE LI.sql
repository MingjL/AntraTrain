/*Writing Questions:
1. I would use join because it performs faster than a subquery
2. CTE is a temporary result set that user can reference with statements. Usage: With _name_ as (cte_query)
3. Table variable is a kind of loacl variable to store data temporarily. The scope of table variable is the batch it's defined in.
4. Turncate always remove all rows from a table but remains table structure. Delete can conditionally remove table contents. Turncate will have better performance because delete will have many logfile texts.
5. Identy column is a column in a database table that is made up of values generated by the database. Turncate resets the sequence for identity column types but delete does not.
6. Truncate reseeds identity values, whereas delete doesn't.
Truncate removes all records and doesn't fire triggers.
Truncate is faster compared to delete as it makes less use of the transaction log.
Truncate is not possible when a table is referenced by a Foreign Key or tables are used in replication or with indexed views.
*/

use Northwind
go
--1
select a.City from dbo.Customers a inner join dbo.Employees b on a.City = b.City group by a.City
--2a
select c.City from dbo.Customers c where c.City not in (select a.City from dbo.Customers a inner join dbo.Employees b on a.City = b.City group by a.City) group by c.city
--3b
select a.City from dbo.Customers a left join dbo.Employees b on a.City = b.City where b.City is NULL group by a.City
--4
select c.City, sum(d.Quantity) from dbo.Customers c join (select a.Quantity, b.CustomerID from dbo.[Order Details] a join dbo.Orders b on a.OrderID = b.OrderID) d on c.CustomerID = d.CustomerID group by c.City
--5a
select City , count(CustomerID) from dbo.Customers group by City having count(CustomerID)>= 2
--5b
--select
--6
Select a.City, Count(b.ProductID) as CountProduct
from dbo.Customers a 
join 
(select c.ProductID,d.CustomerID from dbo.[Order Details] c 
join 
dbo.Orders d on c.OrderID = d.OrderID ) b on a.CustomerID = b.CustomerID 
group by a.City having Count(b.ProductID)>=2

--7
Select a.ContactName from ( select b.ShipCity, c.ContactName from dbo.Orders b join dbo.Customers c on b.CustomerID = c.CustomerID where b.ShipCity != c.City) a group by a.ContactName
--8
select TOP 5 d.ProductName, c.Price,  c.Qty,c.ShipCity from dbo.Products d join
(select a.ProductID, avg(a.UnitPrice) as Price, sum(a.Quantity) as Qty,b.ShipCity,rank() over(partition by a.productID order by sum(a.Quantity) desc) as rnk from dbo.[Order Details] a join dbo.Orders b on a.OrderID = b.OrderID group by a.ProductID,b.ShipCity) c
on c.ProductID = d.ProductID where c.rnk = 1 order by c.Qty desc
--9a
select a.City from dbo.Employees a where City not in (select ShipCity from dbo.Orders)
--9b
Select City from dbo.Employees a left join dbo.Orders b on a.City = b.ShipCity where b.ShipCity is null

--10
Select City from 
(Select Count(a.OrderID) as QtyE,b.EmployeeID, b.City,rank() over(order by Count(a.OrderId) desc) as rnk from dbo.Orders a join dbo.Employees b on a.EmployeeID = b.EmployeeID group by b.EmployeeID,b.City) f
join 
(Select sum(c.Quantity) as qtyp,d.EmployeeID, rank() over(order by sum(c.Quantity) desc) as rnk2 from dbo.[Order Details] c join dbo.Orders d on c.OrderID = d.OrderID group by d.EmployeeID
) g on f.EmployeeID = g.EmployeeID and rnk = 1 and rnk2 =1
--11
-- using rank funciton to group all duplicates and delete all rows with rank >1
--12
--select a.empid from Employee a left join Employee b on a.empid = b.mgrid where b.mgrid is Null

--13
--select deptname, cnt from(b.deptname count(a.deptid) as cnt, rank() over(order by count(a.deptid)) as rnk from Employee a join Dept b on a.deptid=b.deptid) where rnk = 1 order by deptname
--14
--Select deptname, empid, salary, from( select rank() over(partition by deptid order by salary) as rnk , a.deptname, b.empid, b.salary from Dept a join Employee b on a.deptid = b.deptid) where rnk <=3 partition by deptname order by rnk